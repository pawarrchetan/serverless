service: 
  name: aurora

provider:
  name: aws
  tracing:
    apiGateway: true
    lambda: true
  runtime: nodejs12.x
  timeout: 300
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  deploymentBucket:
    name: ${ssm:s3-deployment-files-bucket-name, ''}
  deploymentPrefix: "${self:service}-${sls:instanceId}-${opt:stage, 'dev'}"
  logRetentionInDays: ${self:custom.logRetentionInDays.${self:provider.stage}, 7}
  apiGateway:
    minimumCompressionSize: 1024
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:*
        - secretsmanager:*
        - rds:*
        - rds-data:*
        - ec2:*
        - vpc:*
      Resource: "*"
  environment:
    AURORA_HOST: ${self:custom.AURORA.HOST}
    AURORA_PORT: ${self:custom.AURORA.PORT}
    AURORA_DB_NAME: ${self:custom.AURORA.DB_NAME}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SQL_DEBUG: ${self:custom.AURORA.SQL_DEBUG} 

# Define variables here for visibility
custom:
  apiGatewayThrottling:
    maxRequestsPerSecond: 200
    maxConcurrentRequests: 50
  stage: ${opt:stage, self:provider.stage}
  determinedStage: ${opt:stage, 'dev'}
  logRetentionInDays:
    dev: 7
    staging: 30
    prod: 90
  prune:
    automatic: true
    number: 3
  AURORA:
    DB_NAME: aurora${opt:stage, self:provider.stage}
    HOST:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
    PORT:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
    VPC_ID: ${env:VPC_ID, ssm:/main-vpc/vpc-id}
    RDS_SECRET_NAME: !Ref AuroraRDSDatabaseSecret
    SQL_DEBUG: ${env:SQL_DEBUG, 'false'}

plugins:
  - serverless-plugin-typescript
  - serverless-api-gateway-throttling
  - serverless-prune-plugin
  - serverless-offline

functions:
  syncQuery:
    handler: src/handler_query.query
    vpc:
      securityGroupIds:
        - Ref: AuroraSecurityGroup
      subnetIds:
        ${ssm:/main-vpc/private-subnets~split}
    events:
      - http:
          path: /query
          method: post
  
  createDatabase:
    handler: src/index.handler
    vpc:
      securityGroupIds:
        - Ref: AuroraSecurityGroup
      subnetIds:
        ${ssm:/main-vpc/private-subnets~split}

resources:
  Resources:
    # Aurora DB config
    AuroraSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Aurora Subnet Group"
        SubnetIds:
          ${ssm:/main-vpc/private-subnets~split}
        Tags:
          - Key: heritage
            Value: cloudformation
          - Key: environment
            Value: ${self:custom.determinedStage}
          - Key: service-name
            Value: ${self:service}

    AuroraSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Security Group for the Serverless Aurora RDS DB.
        GroupName: AuroraSecurityGroup
        VpcId: ${self:custom.AURORA.VPC_ID}
        SecurityGroupIngress: 
          - CidrIp: 0.0.0.0/0
            IpProtocol: "-1"
        Tags:
          - Key: heritage
            Value: cloudformation
          - Key: environment
            Value: ${self:custom.determinedStage}
          - Key: service-name
            Value: ${self:service}

    AuroraRDSClusterParameter:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql10
        Parameters:
          rds.force_ssl: 0
        Tags:
          - Key: heritage
            Value: cloudformation
          - Key: environment
            Value: ${self:custom.determinedStage}
          - Key: service-name
            Value: ${self:service}

    AuroraRDSInstanceParameter:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: Parameter group for the Serverless Aurora RDS DB.
        Family: aurora-postgresql10
        Parameters:
          log_statement: "ddl"
          log_rotation_age: 1440
          log_rotation_size: 102400
          rds.log_retention_period: 10080
          statement_timeout: 7200000
        Tags:
          - Key: heritage
            Value: cloudformation
          - Key: environment
            Value: ${self:custom.determinedStage}
          - Key: service-name
            Value: ${self:service}

    AuroraRDSDatabaseSecret:
      Type: 'AWS::SecretsManager::Secret'
      Properties:
        Name: aurora-cluster-secret
        Description: This secret has a username and a dynamically generated secret password.
        GenerateSecretString:
          SecretStringTemplate: '{"username": "master"}'
          GenerateStringKey: "password"
          PasswordLength: 20
          ExcludeCharacters: '"@/\'
        Tags:
          - Key: heritage
            Value: cloudformation
          - Key: environment
            Value: ${self:custom.determinedStage}
          - Key: service-name
            Value: ${self:service}

    AuroraRDSDatabaseSecretName:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /aurora/master-secret-arn
        Type: StringList
        Value: !Ref AuroraRDSDatabaseSecret
        Description: SSM Parameter for the ARN of the RDS secret.

    AuroraRDSCluster:
      Type: "AWS::RDS::DBCluster"
      DependsOn: AuroraRDSDatabaseSecret
      Properties:
        DBClusterIdentifier: aurora${opt:stage, self:provider.stage}
        MasterUsername: !Sub '{{resolve:secretsmanager:aurora-cluster-secret:SecretString:username}}'
        MasterUserPassword: !Sub '{{resolve:secretsmanager:aurora-cluster-secret:SecretString:password}}'
        Port: 5432
        DBSubnetGroupName:
          Ref: AuroraSubnetGroup
        EnableHttpEndpoint: true
        Engine: aurora-postgresql
        EngineVersion: "10.12"
        EngineMode: serverless
        DatabaseName: ${self:custom.AURORA.DB_NAME}
        BackupRetentionPeriod: 3
        DBClusterParameterGroupName:
          Ref: AuroraRDSClusterParameter
        VpcSecurityGroupIds:
          - Ref: AuroraSecurityGroup
        ScalingConfiguration:
          AutoPause: true
          MaxCapacity: 4
          MinCapacity: 2
          SecondsUntilAutoPause: 300
        Tags:
          - Key: heritage
            Value: cloudformation
          - Key: environment
            Value: ${self:custom.determinedStage}
          - Key: service-name
            Value: ${self:service}
    
    CustomResourceLambdaFunctionArn:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /aurora/custom-resource-lambda-arn
        Type: String
        Value:
          Fn::GetAtt: [CreateDatabaseLambdaFunction, Arn]
    
    AuroraRDSClusterArn:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /aurora/cluster-arn
        Type: String
        Value: 
          !Join 
            - ''
            - - 'arn:aws:rds:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':cluster:'
              - !Ref AuroraRDSCluster
        Description: SSM Parameter for the Endpoint Address of the RDS Cluster.

    AuroraRDSClusterEndpoint:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /aurora/cluster-endpoint
        Type: String
        Value: 
          Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
        Description: SSM Parameter for the Endpoint Address of the RDS Cluster.
    
    AuroraRDSClusterPort:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /aurora/cluster-port
        Type: String
        Value: 
          Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
        Description: SSM Parameter for the Endpoint Address of the RDS Cluster.